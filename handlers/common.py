import logging

from telegram import Update
from telegram.ext import (ContextTypes, CommandHandler,
                          MessageHandler, filters, CallbackQueryHandler, ConversationHandler)
from database.database import async_session
from database.models import User
from keyboards.inline import get_main_menu
from telegram import KeyboardButton, ReplyKeyboardMarkup


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"Start command received from user {update.effective_user.id}")
    try:
        async with async_session() as session:
            user = await session.get(User, update.effective_user.id)
            logging.info(f"User data: {user}")

            if not user:
                logging.info("New user - requesting phone number")
                keyboard = [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

                await update.message.reply_text(
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                    reply_markup=reply_markup
                )
                return

            logging.info("Existing user - showing main menu")
            await update.message.reply_text(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu(is_admin=user.is_admin)  # –ü–µ—Ä–µ–¥–∞—ë–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞
            )
    except Exception as e:
        logging.error(f"Error in start_command: {e}")
        raise

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    username = update.effective_user.username

    async with async_session() as session:
        user = User(
            telegram_id=update.effective_user.id,
            phone=contact.phone_number,
            username=username  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ username
        )
        session.add(user)
        await session.commit()

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )


async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    user_id = update.effective_user.id

    async with async_session() as session:
        user = await session.get(User, user_id)
        if user and not user.name:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            user.name = name
            context.user_data['user_name'] = name
            await session.commit()

            await update.message.reply_text(
                f"–û—Ç–ª–∏—á–Ω–æ, {name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu()
            )
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            return ConversationHandler.END
        elif user and user.name:
            # –ï—Å–ª–∏ –∏–º—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            return
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )



def register_common_handlers(application):
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_name,
        block=True
    ), group=1)